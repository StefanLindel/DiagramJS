	//				######################################################### Graph #########################################################
	export class Graph extends Node {
		model:GraphModel;
		root:HTMLElement;
		board:HTMLElement;
		private init:boolean;
		private layouts:Array<any>;
		private loader:Loader;
		private lib:SymbolLibary;
		private layouter:any;
		private DragAndDrop:DragAndDrop;
		private loader:Loader;
		private lib:SymbolLibary;
		private layouts:Array<any>;
		private layouter:any;

			this.layouts = [{name: "dagre", value: new DagreLayout()}];

			this.loader = new Loader(this);
			this.lib = new SymbolLibary();
						this.DragAndDrop = new DragAndDrop(this);

		public addOption(typ, value) {
			this.model.options[typ] = value;
			this.init = false;
		};




		public ExportPDF() {
			var converter, pdf = new window["jsPDF"]('l', 'px', [this.model.width, this.model.height]);
			converter = new window["svgConverter"](this.board, pdf, {removeInvalid: false});
			pdf.save('Download.pdf');
		};

		public ExportEPS() {
			var converter, doc = new window["svgConverter"].jsEPS({inverting: true});
			converter = new window["svgConverter"](this.board, doc, {removeInvalid: false});
			doc.save();
		};

		public ExportPNG() {
			var canvas, context, a, image = new Image();
			image.src = 'data:image/svg+xml;base64,' + util.utf8$to$b64(util.serializeXmlNode(this.board));
			image.onload = function () {
				canvas = document.createElement('canvas');
				canvas.width = image.width;
				canvas.height = image.height;
				context = canvas.getContext('2d');
				context.drawImage(image, 0, 0);
				a = document.createElement('a');
				a.download = "download.png";
				a.href = canvas.toDataURL('image/png');
				a.click();
			};
		};

		public ExportHTML() {
			var data, body, script, json = this.model.toJson();
			body = document.createElement("body");
			script = document.createElement("script");
			body.appendChild(script);
			script.innerHTML = "new Graph(" + JSON.stringify(json, null, "\t") + ").layout();";
			data = "<html><head>" + document.head.innerHTML.trim() + "</head>" + body.toString() + "</html>";
			this.Save("text/json", data, "download.html");
		};

		public SaveAs(typ:String) {
			typ = typ.toLowerCase();
			if (typ === "svg") {
				this.Save("image/svg+xml", util.serializeXmlNode(this.board), "download.svg");
			} else if (typ === "html") {
				this.ExportHTML();
			} else if (typ === "png") {
				this.ExportPNG();
			} else if (typ === "pdf") {
				this.ExportPDF();
			} else if (typ === "eps") {
				this.ExportEPS();
			}
		};

		public SavePosition() {
			var data = [], node, id;
			for (id in this.model.nodes) {
				if (!this.model.nodes.hasOwnProperty(id)) {
					continue;
				}
				node = this.model.nodes[id];
				data.push({id: node.id, x: node.x, y: node.y});
			}
			if (window.localStorage && this.model.id) {
				window.localStorage.setItem(this.model.id, JSON.stringify(data));
			}
		};

		public LoadPosition() {
			if (this.model.id && window.localStorage) {
				var node, id, data = window.localStorage.getItem(this.model.id);
				if (data) {
					data = JSON.parse(data);
					for (id in data) {
						if (!data.hasOwnProperty(id)) {
							continue;
						}
						node = data[id];
						if (this.model.nodes[node.id]) {
							this.model.nodes[node.id].x = node.x;
							this.model.nodes[node.id].y = node.y;
						}
					}
					this.clearBoard(true);
					this.draw();
				}
			}
		};

		public Save(typ:string, data:Object, name:string) {
			var a = document.createElement("a");
			a.href = window.URL.createObjectURL(new Blob([data], {type: typ}));
			a["download"] = name;
			a.click();
		}
	}
